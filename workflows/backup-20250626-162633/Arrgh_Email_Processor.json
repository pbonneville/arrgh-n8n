{
  "createdAt": "2025-06-23T07:47:12.154Z",
  "updatedAt": "2025-06-23T21:56:44.748Z",
  "id": "B59fialntF5x0ZUC",
  "name": "Arrgh Email Processor",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "inbound-email",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "cc0ee941-552c-4e7b-a9fb-3a074c591fb1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        920,
        160
      ],
      "webhookId": "inbound-email"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.headers['x-amz-sns-message-type'] }}",
              "value2": "SubscriptionConfirmation"
            }
          ]
        }
      },
      "id": "39568785-10f8-4906-9a77-aa8dca58de73",
      "name": "Is Subscription Confirmation?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        160
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.body.parseJson().SubscribeURL}}",
        "options": {}
      },
      "id": "ab7dc7a4-15eb-49a5-acc2-bd7824eed7ac",
      "name": "Confirm Subscription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1360,
        60
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.parseJson().Type}}",
              "value2": "Notification"
            }
          ]
        }
      },
      "id": "5a4f518d-8a02-4068-bf9c-0ea79758380d",
      "name": "Is Email Notification?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1360,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": " // First, let's see what we're actually receiving\n  console.log('Input data:', JSON.stringify($json, null, 2));\n\n  // Parse the SNS message from the webhook\n  let snsMessage;\n  if ($json.body) {\n    // If body is a string, parse it\n    if (typeof $json.body === 'string') {\n      const snsBody = JSON.parse($json.body);\n      snsMessage = JSON.parse(snsBody.Message);\n    } else {\n      // If body is already an object\n      snsMessage = JSON.parse($json.body.Message);\n    }\n  } else if ($json.Message) {\n    // Direct Message field\n    snsMessage = JSON.parse($json.Message);\n  } else {\n    throw new Error('Could not find SNS Message in input data');\n  }\n\n  // Extract email details from SES notification\n  const emailData = {\n    messageId: snsMessage.mail.messageId,\n    timestamp: snsMessage.mail.timestamp,\n    source: snsMessage.mail.source,\n    destination: snsMessage.mail.destination,\n    commonHeaders: snsMessage.mail.commonHeaders,\n    receipt: snsMessage.receipt,\n    // Use the messageId to construct S3 key\n    s3Bucket: \"n8n-inbound-emails-production\",\n    s3ObjectKey: \"emails/\" + snsMessage.mail.messageId\n  };\n\n  return emailData;"
      },
      "id": "ab789de3-8189-4ad2-8997-93c93b8512d7",
      "name": "Parse Email Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        260
      ]
    },
    {
      "parameters": {
        "url": "=https://s3.us-west-2.amazonaws.com/{{ $json.s3Bucket }}/{{ $json.s3ObjectKey\n  }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "aws",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "06db075e-f695-4939-b699-ea8e34c4e084",
      "name": "Download Email from S3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1800,
        260
      ],
      "credentials": {
        "aws": {
          "id": "pex7iOrrjZtJ7qua",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse the raw email content\nconst emailContent = $json.data;\n\n// Simple email parsing (you might want to use a more robust parser)\nconst lines = emailContent.split('\\n');\nlet inHeaders = true;\nlet headers = {};\nlet body = '';\nlet currentHeader = '';\n\nfor (let line of lines) {\n  if (inHeaders) {\n    if (line.trim() === '') {\n      inHeaders = false;\n      continue;\n    }\n    \n    if (line.startsWith(' ') || line.startsWith('\\t')) {\n      // Continuation of previous header\n      if (currentHeader) {\n        headers[currentHeader] += ' ' + line.trim();\n      }\n    } else {\n      // New header\n      const colonIndex = line.indexOf(':');\n      if (colonIndex > 0) {\n        currentHeader = line.substring(0, colonIndex).toLowerCase();\n        headers[currentHeader] = line.substring(colonIndex + 1).trim();\n      }\n    }\n  } else {\n    body += line + '\\n';\n  }\n}\n\n// Extract common email fields\nconst parsedEmail = {\n  messageId: $input.first().json.messageId,\n  timestamp: $input.first().json.timestamp,\n  from: headers['from'] || '',\n  to: headers['to'] || '',\n  subject: headers['subject'] || '',\n  date: headers['date'] || '',\n  body: body.trim(),\n  headers: headers,\n  rawContent: emailContent\n};\n\nreturn parsedEmail;"
      },
      "id": "557ea7be-0b35-4820-a6d4-d4197e59a48f",
      "name": "Parse Email Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        260
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Email processed successfully",
        "options": {}
      },
      "id": "17674bbc-6715-455a-9dec-16833e73fd69",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2460,
        260
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Subscription confirmed",
        "options": {}
      },
      "id": "03faae9f-edb2-4e19-af18-bd60f2d8890c",
      "name": "Subscription Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1580,
        60
      ]
    },
    {
      "parameters": {
        "fromEmail": "paul@paulbonneville.com",
        "toEmail": "test@arrgh.paulbonneville.com",
        "subject": "Test n8n Arrgh Email Parser Workflow",
        "html": "Is this thing on?",
        "options": {
          "appendAttribution": true
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        920,
        500
      ],
      "id": "29a03a61-b607-4081-97a0-694eaedbf27b",
      "name": "Send email",
      "webhookId": "1db1a785-4a68-4274-b39e-4220d8fc3067",
      "credentials": {
        "smtp": {
          "id": "YpSJy0T88FgRgPaT",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Convert JavaScript objects to Python\n  json_data = _input.first().json.to_py()\n\n  # Log email details\n  print(f\"Received email from: {json_data.get('from', '')}\")\n  print(f\"Subject: {json_data.get('subject', '')}\")\n\n  # Get body preview (first 100 characters)\n  body = json_data.get('body', '')\n  print(f\"Body preview: {body[:100]}\")\n\n  # Example: Extract specific data from email body\n  body_text = body.lower()\n  processing_type = 'general'\n\n  if 'invoice' in body_text:\n      processing_type = 'invoice'\n  elif 'support' in body_text:\n      processing_type = 'support ticket'\n\n  # Return the processed data\n  from datetime import datetime\n\n  return {\n      'processed': True,\n      'emailFrom': json_data.get('from', ''),\n      'emailSubject': json_data.get('subject', ''),\n      'receivedAt': datetime.now().isoformat(),\n      'processingResult': f'Email logged successfully as {processing_type}'\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        260
      ],
      "id": "2ff41119-d9a1-4769-9bb7-93705ddb8133",
      "name": "Process Content"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Is Subscription Confirmation?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Subscription Confirmation?": {
      "main": [
        [
          {
            "node": "Confirm Subscription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Email Notification?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirm Subscription": {
      "main": [
        [
          {
            "node": "Subscription Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Email Notification?": {
      "main": [
        [
          {
            "node": "Parse Email Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email Metadata": {
      "main": [
        [
          {
            "node": "Download Email from S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Email from S3": {
      "main": [
        [
          {
            "node": "Parse Email Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email Content": {
      "main": [
        [
          {
            "node": "Process Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email": {
      "main": [
        []
      ]
    },
    "Process Content": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "0dd62799-2127-4d9d-ae0f-35c7fab084bc",
  "triggerCount": 1,
  "tags": []
}